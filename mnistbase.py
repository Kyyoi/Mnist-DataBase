# -*- coding: utf-8 -*-
"""MnistBase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MdxbwCeKdwQGQG_N5g_dQQfT89R0EFF4
"""

from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import MinMaxScaler
from keras.datasets import mnist
from sklearn.linear_model import Perceptron
from sklearn.model_selection import  GridSearchCV
from time import time
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
import numpy as np
from sklearn.preprocessing import StandardScaler, MinMaxScaler

(xtrain,ytrain),(xtest,ytest) = mnist.load_data()
xtrain = xtrain.reshape(60000, 28*28).astype('float32')
xtest = xtest.reshape(10000, 28*28).astype('float32')

xtrain /= 255
xtest /= 255

from sklearn.metrics import classification_report
#print(classification_report(ytest, y_pred))

start_time = time()
std_MLP1HL300 = Pipeline([('scaler', MinMaxScaler()),
                          ('mlp', MLPClassifier( solver = 'adam',
                                  hidden_layer_sizes=(701), max_iter=200,
                                  learning_rate='constant',
                                  learning_rate_init=0.001, 
                                  alpha=0.001,
                                  random_state=0))]
                        ).fit(xtrain, ytrain)
end_time = time()
ypred = std_MLP1HL300.predict(xtest)
score = accuracy_score(ytest, ypred)

print(score)

import matplotlib.pyplot as plt

tab=[]
for i in range(101,1001,100):
    start_time = time()
    std_MLP1HL300 = Pipeline([('scaler', MinMaxScaler()),
                              ('mlp', MLPClassifier( solver = 'adam',
                                      hidden_layer_sizes=(i), max_iter=200,
                                      learning_rate='constant',
                                      learning_rate_init=0.001, 
                                      alpha=0.001,
                                      random_state=0))]
                            ).fit(xtrain, ytrain)
    end_time = time()
    ypred = std_MLP1HL300.predict(xtest)
    score = accuracy_score(ytest, ypred)
    tab.append(score)
"""
plt.figure(1)
plt.plot([i for i in range(101,1001,100)], tab)
plt.show()"""

plt.figure(1)
plt.plot([i for i in range(101,1001,100)], tab)
plt.show()

print(tab)